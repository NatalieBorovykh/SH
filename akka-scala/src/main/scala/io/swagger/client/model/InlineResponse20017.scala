/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */

package io.swagger.client.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime
import java.util.UUID

case class InlineResponse20017 (
  checkin: Option[CheckinResponse],
  precheckin: Option[PrecheckinRequestResponse],
  trackin: Option[TrackinResponse],
  /* Statuses: * pending (waiting for a Merchant action) * completed (check-in closed with or without payment) * canceled (merchant has canceled the request) * aborted (transaction has failed) * away (No Open trackin for the Venue, No Open checkin, No Open Pre-checkin request) * precheckedin (No Open trackin for the Venue, No Open checkin, Open Pre-checkin request) * nearby (Open trackin for the Venue, No Open checkin, User is not ready for fast checkin) * nearbyready (Open trackin for the Venue, No Open checkin, User is ready for fast checkin) * checkedin (Open checkin, No Pending checkout_request, No Payment Transaction) * paidin (Open checkin for the venue, No Pending checkout_request, Payment Transaction (state = completed and checkout_request_id = nil)) * paidinreadyout (Open checkin, Pending checkout_request (state = pending), Completed transactions during checkin) * readyout (Open checkin, Pending checkout_request (state = pending)) * pendingroom (Current checkin status is pending_room)  */
  status: Option[InlineResponse20017Enums.Status]
) extends ApiModel

object InlineResponse20017Enums {

  type Status = Status.Value
  object Status extends Enumeration {
    val Pending = Value("pending")
    val Completed = Value("completed")
    val Canceled = Value("canceled")
    val Aborted = Value("aborted")
    val Away = Value("away")
    val Precheckedin = Value("precheckedin")
    val Nearby = Value("nearby")
    val Nearbyready = Value("nearbyready")
    val Checkedin = Value("checkedin")
    val Paidin = Value("paidin")
    val Paidinreadyout = Value("paidinreadyout")
    val Readyout = Value("readyout")
    val Pendingroom = Value("pendingroom")
  }

}

