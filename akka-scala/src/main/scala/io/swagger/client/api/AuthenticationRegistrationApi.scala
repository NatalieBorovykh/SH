/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.AccessToken
import io.swagger.client.model.AccessToken1
import io.swagger.client.model.AccessToken2
import io.swagger.client.model.Email
import io.swagger.client.model.Email1
import io.swagger.client.model.Errors
import io.swagger.client.model.InlineResponse20012
import io.swagger.client.model.InlineResponse20013
import io.swagger.client.model.InlineResponse20014
import io.swagger.client.model.InlineResponse20015
import io.swagger.client.model.Password
import io.swagger.client.model.Password1
import io.swagger.client.model.Tokens
import io.swagger.client.model.User
import io.swagger.client.model.User1
import io.swagger.client.model.User2
import io.swagger.client.model.User3
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object AuthenticationRegistrationApi {

  /**
   * Authenticate user with Email and Password
   * 
   * Expected answers:
   *   code 200 : InlineResponse20013 (User and Session Data. User Data is nulled if not filled via PUT /guest/users/profile request)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param user Authentication request object
   */
  def guestExternalUsersAuthPost(user: User2)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20013] =
    ApiRequest[InlineResponse20013](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/external_users/auth", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(user)
      .withSuccessResponse[InlineResponse20013](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Register guest user
   * 
   * Expected answers:
   *   code 200 : InlineResponse20012 (New user session and user object)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param user Registration request
   */
  def guestExternalUsersPost(user: User)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20012] =
    ApiRequest[InlineResponse20012](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/external_users", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(user)
      .withSuccessResponse[InlineResponse20012](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Facebook auth access token based (OAuth2).
   * 
   * Expected answers:
   *   code 200 : InlineResponse20013 (User and Session Data. User Data is nulled if not filled via PUT /guest/users/profile request)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param accessToken The access token to sign in.
   */
  def guestUsersAuthFacebookPost(accessToken: Option[AccessToken] = None)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20013] =
    ApiRequest[InlineResponse20013](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/auth/facebook", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(accessToken)
      .withSuccessResponse[InlineResponse20013](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Verifies an existing conichi session
   * 
   * Expected answers:
   *   code 200 : InlineResponse20012 (New user session and user object)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   bodyHash (apiKey)
   *   consumerKey (apiKey)
   *   hmac (apiKey)
   *   hmacTimestamp (apiKey)
   *   hmacVersion (apiKey)
   *   sessionUuid (apiKey)
   */
  def guestUsersAuthGet()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[InlineResponse20012] =
    ApiRequest[InlineResponse20012](ApiMethods.GET, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/auth", "application/json")
      .withApiKey(apiKey, "X-Body-Hash", HEADER)
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withApiKey(apiKey, "X-HMAC", HEADER)
      .withApiKey(apiKey, "X-HMAC-Timestamp", HEADER)
      .withApiKey(apiKey, "X-HMAC-Version", HEADER)
      .withApiKey(apiKey, "X-Session-Uuid", HEADER)
      .withSuccessResponse[InlineResponse20012](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * LinkedIn auth access token based (OAuth2).
   * 
   * Expected answers:
   *   code 200 : InlineResponse20013 (User and Session Data. User Data is nulled if not filled via PUT /guest/users/profile request)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param accessToken The access token to sign in.
   */
  def guestUsersAuthLinkedinPost(accessToken: Option[AccessToken1] = None)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20013] =
    ApiRequest[InlineResponse20013](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/auth/linkedin", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(accessToken)
      .withSuccessResponse[InlineResponse20013](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Authenticate user with Email and Password
   * 
   * Expected answers:
   *   code 200 : InlineResponse20013 (User and Session Data. User Data is nulled if not filled via PUT /guest/users/profile request)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param user Authentication request object
   */
  def guestUsersAuthPost(user: User3)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20013] =
    ApiRequest[InlineResponse20013](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/auth", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(user)
      .withSuccessResponse[InlineResponse20013](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Xing auth access token based (OAuth2).
   * 
   * Expected answers:
   *   code 200 : InlineResponse20013 (User and Session Data. User Data is nulled if not filled via PUT /guest/users/profile request)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param accessToken The access token/secret to sign in.
   */
  def guestUsersAuthXingPost(accessToken: Option[AccessToken2] = None)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20013] =
    ApiRequest[InlineResponse20013](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/auth/xing", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(accessToken)
      .withSuccessResponse[InlineResponse20013](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Authenticate user using the url_token and device_verification_token.
   * 
   * Expected answers:
   *   code 200 : InlineResponse20013 (New user session and user object)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param tokens 
   */
  def guestUsersEmailLoginPost(tokens: Option[Tokens] = None)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20013] =
    ApiRequest[InlineResponse20013](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/email_login", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(tokens)
      .withSuccessResponse[InlineResponse20013](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Request an email with email_login link, which will be used to complete the authentication. Works for new and old users (Sign in and Sign up).
   * 
   * Expected answers:
   *   code 200 : InlineResponse20014 (New user session and user object)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param email 
   */
  def guestUsersEmailLoginRequestPost(email: Option[Email] = None)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20014] =
    ApiRequest[InlineResponse20014](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/email_login/request", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(email)
      .withSuccessResponse[InlineResponse20014](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Logout user
   * 
   * Expected answers:
   *   code 200 : InlineResponse20015 (status ok)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   bodyHash (apiKey)
   *   consumerKey (apiKey)
   *   hmac (apiKey)
   *   hmacTimestamp (apiKey)
   *   hmacVersion (apiKey)
   *   sessionUuid (apiKey)
   */
  def guestUsersLogoutDelete()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[InlineResponse20015] =
    ApiRequest[InlineResponse20015](ApiMethods.DELETE, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/logout", "application/json")
      .withApiKey(apiKey, "X-Body-Hash", HEADER)
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withApiKey(apiKey, "X-HMAC", HEADER)
      .withApiKey(apiKey, "X-HMAC-Timestamp", HEADER)
      .withApiKey(apiKey, "X-HMAC-Version", HEADER)
      .withApiKey(apiKey, "X-Session-Uuid", HEADER)
      .withSuccessResponse[InlineResponse20015](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : InlineResponse20015 (status ok)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   bodyHash (apiKey)
   *   consumerKey (apiKey)
   *   hmac (apiKey)
   *   hmacTimestamp (apiKey)
   *   hmacVersion (apiKey)
   *   sessionUuid (apiKey)
   * 
   * @param password 
   */
  def guestUsersPasswordPut(password: Password)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[InlineResponse20015] =
    ApiRequest[InlineResponse20015](ApiMethods.PUT, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/password", "application/json")
      .withApiKey(apiKey, "X-Body-Hash", HEADER)
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withApiKey(apiKey, "X-HMAC", HEADER)
      .withApiKey(apiKey, "X-HMAC-Timestamp", HEADER)
      .withApiKey(apiKey, "X-HMAC-Version", HEADER)
      .withApiKey(apiKey, "X-Session-Uuid", HEADER)
      .withBody(password)
      .withSuccessResponse[InlineResponse20015](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : InlineResponse20012 (user and session)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param email 
   */
  def guestUsersPasswordResetPost(email: Email1)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20012] =
    ApiRequest[InlineResponse20012](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/password/reset", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(email)
      .withSuccessResponse[InlineResponse20012](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Update guest&#39;s password using a reset token
   * 
   * Expected answers:
   *   code 200 : InlineResponse20012 (user and session)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   bodyHash (apiKey)
   *   consumerKey (apiKey)
   *   hmac (apiKey)
   *   hmacTimestamp (apiKey)
   *   hmacVersion (apiKey)
   *   sessionUuid (apiKey)
   * 
   * @param password 
   */
  def guestUsersPasswordUpdatePut(password: Password1)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[InlineResponse20012] =
    ApiRequest[InlineResponse20012](ApiMethods.PUT, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users/password/update", "application/json")
      .withApiKey(apiKey, "X-Body-Hash", HEADER)
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withApiKey(apiKey, "X-HMAC", HEADER)
      .withApiKey(apiKey, "X-HMAC-Timestamp", HEADER)
      .withApiKey(apiKey, "X-HMAC-Version", HEADER)
      .withApiKey(apiKey, "X-Session-Uuid", HEADER)
      .withBody(password)
      .withSuccessResponse[InlineResponse20012](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Register guest user
   * 
   * Expected answers:
   *   code 200 : InlineResponse20012 (New user session and user object)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param user Registration request
   */
  def guestUsersPost(user: User1)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20012] =
    ApiRequest[InlineResponse20012](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/users", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(user)
      .withSuccessResponse[InlineResponse20012](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      

}

