/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Errors
import io.swagger.client.model.Filters1
import io.swagger.client.model.Filters2
import io.swagger.client.model.Filters3
import io.swagger.client.model.InlineResponse20010
import io.swagger.client.model.InlineResponse20011
import io.swagger.client.model.InlineResponse20037
import io.swagger.client.model.InlineResponse20038
import io.swagger.client.model.InlineResponse20039
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object VenueApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 200 : InlineResponse20037 (Venues array with basic information)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   consumerKey (apiKey)
   * 
   * @param filters 
   */
  def guestVenuesBasicGet(filters: Option[Filters1] = None)(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse20037] =
    ApiRequest[InlineResponse20037](ApiMethods.GET, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/venues/basic", "application/json")
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withBody(filters)
      .withSuccessResponse[InlineResponse20037](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : InlineResponse20038 (Venues)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   bodyHash (apiKey)
   *   consumerKey (apiKey)
   *   hmac (apiKey)
   *   hmacTimestamp (apiKey)
   *   hmacVersion (apiKey)
   *   sessionUuid (apiKey)
   * 
   * @param filters 
   */
  def guestVenuesGet(filters: Option[Filters2] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[InlineResponse20038] =
    ApiRequest[InlineResponse20038](ApiMethods.GET, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/venues", "application/json")
      .withApiKey(apiKey, "X-Body-Hash", HEADER)
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withApiKey(apiKey, "X-HMAC", HEADER)
      .withApiKey(apiKey, "X-HMAC-Timestamp", HEADER)
      .withApiKey(apiKey, "X-HMAC-Version", HEADER)
      .withApiKey(apiKey, "X-Session-Uuid", HEADER)
      .withBody(filters)
      .withSuccessResponse[InlineResponse20038](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Passing a venue ID returns a collection of deliverables by category
   * 
   * Expected answers:
   *   code 200 : InlineResponse20010 (All deliverables by category from venue)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   bodyHash (apiKey)
   *   consumerKey (apiKey)
   *   hmac (apiKey)
   *   hmacTimestamp (apiKey)
   *   hmacVersion (apiKey)
   *   sessionUuid (apiKey)
   * 
   * @param id ID of venue
   * @param filter filter for deliverables category [&#39;all&#39;, &#39;precheckin&#39;, &#39;checkout&#39;]
   */
  def guestVenuesIdDeliverablesFilterGet(id: Long, filter: String)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[InlineResponse20010] =
    ApiRequest[InlineResponse20010](ApiMethods.GET, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/venues/{id}/deliverables/{filter}", "application/json")
      .withApiKey(apiKey, "X-Body-Hash", HEADER)
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withApiKey(apiKey, "X-HMAC", HEADER)
      .withApiKey(apiKey, "X-HMAC-Timestamp", HEADER)
      .withApiKey(apiKey, "X-HMAC-Version", HEADER)
      .withApiKey(apiKey, "X-Session-Uuid", HEADER)
      .withPathParam("id", id)
      .withPathParam("filter", filter)
      .withSuccessResponse[InlineResponse20010](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : InlineResponse20039 (Venue)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   bodyHash (apiKey)
   *   consumerKey (apiKey)
   *   hmac (apiKey)
   *   hmacTimestamp (apiKey)
   *   hmacVersion (apiKey)
   *   sessionUuid (apiKey)
   * 
   * @param id 
   */
  def guestVenuesIdGet(id: Double)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[InlineResponse20039] =
    ApiRequest[InlineResponse20039](ApiMethods.GET, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/venues/{id}", "application/json")
      .withApiKey(apiKey, "X-Body-Hash", HEADER)
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withApiKey(apiKey, "X-HMAC", HEADER)
      .withApiKey(apiKey, "X-HMAC-Timestamp", HEADER)
      .withApiKey(apiKey, "X-HMAC-Version", HEADER)
      .withApiKey(apiKey, "X-Session-Uuid", HEADER)
      .withPathParam("id", id)
      .withSuccessResponse[InlineResponse20039](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : InlineResponse20038 (Venues)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   bodyHash (apiKey)
   *   consumerKey (apiKey)
   *   hmac (apiKey)
   *   hmacTimestamp (apiKey)
   *   hmacVersion (apiKey)
   *   sessionUuid (apiKey)
   * 
   * @param filters 
   */
  def guestVenuesLocationGet(filters: Option[Filters3] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[InlineResponse20038] =
    ApiRequest[InlineResponse20038](ApiMethods.GET, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/venues/location", "application/json")
      .withApiKey(apiKey, "X-Body-Hash", HEADER)
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withApiKey(apiKey, "X-HMAC", HEADER)
      .withApiKey(apiKey, "X-HMAC-Timestamp", HEADER)
      .withApiKey(apiKey, "X-HMAC-Version", HEADER)
      .withApiKey(apiKey, "X-Session-Uuid", HEADER)
      .withBody(filters)
      .withSuccessResponse[InlineResponse20038](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
        /**
   * Checkin to venue. Checkin fails if no precheckin available
   * 
   * Expected answers:
   *   code 200 : InlineResponse20011 (Checkin response. Reservation object is delivered for PMS integrated venues only)
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   * 
   * Available security schemes:
   *   bodyHash (apiKey)
   *   consumerKey (apiKey)
   *   hmac (apiKey)
   *   hmacTimestamp (apiKey)
   *   hmacVersion (apiKey)
   *   sessionUuid (apiKey)
   * 
   * @param venueId ID of venue to fetch
   */
  def guestVenuesVenueIdAutoCheckinPost(venueId: Long)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[InlineResponse20011] =
    ApiRequest[InlineResponse20011](ApiMethods.POST, "https://virtserver.swaggerhub.com/SmartBear-CC/Natalie_TestAutoMock/1.0.0", "/guest/venues/{venue_id}/auto_checkin", "application/json")
      .withApiKey(apiKey, "X-Body-Hash", HEADER)
      .withApiKey(apiKey, "X-Consumer-Key", HEADER)
      .withApiKey(apiKey, "X-HMAC", HEADER)
      .withApiKey(apiKey, "X-HMAC-Timestamp", HEADER)
      .withApiKey(apiKey, "X-HMAC-Version", HEADER)
      .withApiKey(apiKey, "X-Session-Uuid", HEADER)
      .withPathParam("venue_id", venueId)
      .withSuccessResponse[InlineResponse20011](200)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      

}

